{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrea Polini\\\\Documents\\\\React_2024\\\\fitstic-react-2024-main\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport Counter from './components/Counter';\n\n// export default function App() {\n//   return <>\n//     <div className={styles.title}>\n//       <img src={logo} alt=\"logo\" />\n//       <div>Fitstic React 2024</div>\n//     </div>\n//     { /*<MyComponent /> */}\n//     <CyclicRenderingComponent />\n//   </>;\n// }\n\n// //ha la stessa funzione della function Sum con la differenza che la function ha valenza solo all'interno di MyComponent, mentre questa variabile const sum ha valenza in tutto il file\n// const sum=(n1:number, n2:number) => {return n1+n2};\n\n// export function MyComponent() {\n//   // function Sum(n1:number, n2:number){\n//   //   return n1+n2;\n//   // }\n\n//   let num:number=5;\n//   let str:string=\"ciao\";\n//   let bool:boolean=true;\n\n//   //Rendering condizionale con variabile di appoggio\n//   let val:JSX.Element;\n//   if(bool===true)\n//   {\n//     val=<div>bool è true</div>\n//   }\n//   else\n//   {\n//     val=<div>bool è false</div>\n//   }\n\n//   //Stampare qualcosa solo se è true, altrimenti non stampare nulla\n//   let val1:JSX.Element | null=null;\n//   if(bool===true)\n//   {\n//     val1=<div>bool è true</div>\n//   }\n\n//   //Lo switch può essere utilizzato ma non dentro al JSX -> JSX non supporta lo switch quindi devo per forza utilizzarlo mediante varibiabile di appoggio\n//   let varAppoggio;\n//   switch(num) {\n//     case 1:{ \n//       varAppoggio=<div>num è 1</div>;\n//       break;\n//     }\n//     case 2:{ \n//       varAppoggio=<div>num è 2</div>;\n//       break;\n//     }\n//     case 3:{ \n//       varAppoggio=<div>num è 3</div>;\n//       break;\n//     }\n//     default:{\n//       varAppoggio=<div>altro</div>;\n//       break;\n//     }\n//   }\n\n//   let varSomma=sum(2,3);\n//   //let varSomma=Sum(2,3);\n\n//   return <div>\n//   <div>myComponent!</div>\n//   <div>num:{num}</div>\n//   <div>str:{str}</div>\n//   <div>bool:{bool} Attenzione! I booleani non vengono visualizzati</div>\n//   {val}\n//   {/*Rendering condizionale con operatore ternario*/}\n//   {bool === true ? <div>bool è true</div> : <div>bool è false</div>} \n//   {/*Stampare qualcosa solo se la condizione è true, altrimenti nulla*/}\n//   {bool===true && <div>bool è true</div>}\n//   <div>Risultato somma: {varSomma}</div>\n//   <div>Risultato somma: {sum(4,3)}</div>\n//   {/*<div>Risultato somma: {Sum(4,3)}</div>*/}\n//   </div>;\n// }\n\n// export function CyclicRenderingComponent() {\n//   let array:number[]=[2,4,6,7];\n//   let arrayJSX=array.map(item => {return <div>Num:{item}</div>});\n\n//   let arrayDiJSX=[];\n//   for(let i=0; i<array.length;i++)\n//   {\n//     arrayDiJSX.push(<div key={i}>arrayDiJSX posizione {i} : {array[i]}</div>);\n//   }\n\n//   return <>\n//   <h4>Rendering ciclico</h4>\n//   {arrayJSX}\n//   {array.map((item,index) => {return <div key={index}>Num {index} : {item}</div>})}\n//   {arrayDiJSX}\n//   </>\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Counter","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Andrea Polini/Documents/React_2024/fitstic-react-2024-main/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport styles from './App.module.scss';\nimport logo from \"./assets/logo512.png\";\nimport Display from './components/Display';\nimport Counter from './components/Counter';\n\n// export default function App() {\n//   return <>\n//     <div className={styles.title}>\n//       <img src={logo} alt=\"logo\" />\n//       <div>Fitstic React 2024</div>\n//     </div>\n//     { /*<MyComponent /> */}\n//     <CyclicRenderingComponent />\n//   </>;\n// }\n\n// //ha la stessa funzione della function Sum con la differenza che la function ha valenza solo all'interno di MyComponent, mentre questa variabile const sum ha valenza in tutto il file\n// const sum=(n1:number, n2:number) => {return n1+n2};\n\n// export function MyComponent() {\n//   // function Sum(n1:number, n2:number){\n//   //   return n1+n2;\n//   // }\n  \n\n//   let num:number=5;\n//   let str:string=\"ciao\";\n//   let bool:boolean=true;\n\n//   //Rendering condizionale con variabile di appoggio\n//   let val:JSX.Element;\n//   if(bool===true)\n//   {\n//     val=<div>bool è true</div>\n//   }\n//   else\n//   {\n//     val=<div>bool è false</div>\n//   }\n\n//   //Stampare qualcosa solo se è true, altrimenti non stampare nulla\n//   let val1:JSX.Element | null=null;\n//   if(bool===true)\n//   {\n//     val1=<div>bool è true</div>\n//   }\n\n//   //Lo switch può essere utilizzato ma non dentro al JSX -> JSX non supporta lo switch quindi devo per forza utilizzarlo mediante varibiabile di appoggio\n//   let varAppoggio;\n//   switch(num) {\n//     case 1:{ \n//       varAppoggio=<div>num è 1</div>;\n//       break;\n//     }\n//     case 2:{ \n//       varAppoggio=<div>num è 2</div>;\n//       break;\n//     }\n//     case 3:{ \n//       varAppoggio=<div>num è 3</div>;\n//       break;\n//     }\n//     default:{\n//       varAppoggio=<div>altro</div>;\n//       break;\n//     }\n//   }\n\n//   let varSomma=sum(2,3);\n//   //let varSomma=Sum(2,3);\n\n//   return <div>\n//   <div>myComponent!</div>\n//   <div>num:{num}</div>\n//   <div>str:{str}</div>\n//   <div>bool:{bool} Attenzione! I booleani non vengono visualizzati</div>\n//   {val}\n//   {/*Rendering condizionale con operatore ternario*/}\n//   {bool === true ? <div>bool è true</div> : <div>bool è false</div>} \n//   {/*Stampare qualcosa solo se la condizione è true, altrimenti nulla*/}\n//   {bool===true && <div>bool è true</div>}\n//   <div>Risultato somma: {varSomma}</div>\n//   <div>Risultato somma: {sum(4,3)}</div>\n//   {/*<div>Risultato somma: {Sum(4,3)}</div>*/}\n//   </div>;\n// }\n\n// export function CyclicRenderingComponent() {\n//   let array:number[]=[2,4,6,7];\n//   let arrayJSX=array.map(item => {return <div>Num:{item}</div>});\n\n//   let arrayDiJSX=[];\n//   for(let i=0; i<array.length;i++)\n//   {\n//     arrayDiJSX.push(<div key={i}>arrayDiJSX posizione {i} : {array[i]}</div>);\n//   }\n\n//   return <>\n//   <h4>Rendering ciclico</h4>\n//   {arrayJSX}\n//   {array.map((item,index) => {return <div key={index}>Num {index} : {item}</div>})}\n//   {arrayDiJSX}\n//   </>\n// }\n\nexport default function App() {\n\n  return <>\n  <div>App</div>\n  <Counter />\n  <Counter />\n  </>\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAkB,OAAO;AAIrC,OAAOC,OAAO,MAAM,sBAAsB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAE5B,oBAAOH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACPJ,OAAA;MAAAI,QAAA,EAAK;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACdR,OAAA,CAACF,OAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXR,OAAA,CAACF,OAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACT,CAAC;AACL;AAACC,EAAA,GAPuBN,GAAG;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}