{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrea Polini\\\\Documents\\\\React_2024\\\\fitstic-react-2024-main\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Counter from './components/Counter';\nimport { PersonInput } from './components/PersonInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// export default function App() {\n//   return <>\n//     <div className={styles.title}>\n//       <img src={logo} alt=\"logo\" />\n//       <div>Fitstic React 2024</div>\n//     </div>\n//     { /*<MyComponent /> */}\n//     <CyclicRenderingComponent />\n//   </>;\n// }\n\n// //ha la stessa funzione della function Sum con la differenza che la function ha valenza solo all'interno di MyComponent, mentre questa variabile const sum ha valenza in tutto il file\n// const sum=(n1:number, n2:number) => {return n1+n2};\n\n// export function MyComponent() {\n//   // function Sum(n1:number, n2:number){\n//   //   return n1+n2;\n//   // }\n\n//   let num:number=5;\n//   let str:string=\"ciao\";\n//   let bool:boolean=true;\n\n//   //Rendering condizionale con variabile di appoggio\n//   let val:JSX.Element;\n//   if(bool===true)\n//   {\n//     val=<div>bool è true</div>\n//   }\n//   else\n//   {\n//     val=<div>bool è false</div>\n//   }\n\n//   //Stampare qualcosa solo se è true, altrimenti non stampare nulla\n//   let val1:JSX.Element | null=null;\n//   if(bool===true)\n//   {\n//     val1=<div>bool è true</div>\n//   }\n\n//   //Lo switch può essere utilizzato ma non dentro al JSX -> JSX non supporta lo switch quindi devo per forza utilizzarlo mediante varibiabile di appoggio\n//   let varAppoggio;\n//   switch(num) {\n//     case 1:{ \n//       varAppoggio=<div>num è 1</div>;\n//       break;\n//     }\n//     case 2:{ \n//       varAppoggio=<div>num è 2</div>;\n//       break;\n//     }\n//     case 3:{ \n//       varAppoggio=<div>num è 3</div>;\n//       break;\n//     }\n//     default:{\n//       varAppoggio=<div>altro</div>;\n//       break;\n//     }\n//   }\n\n//   let varSomma=sum(2,3);\n//   //let varSomma=Sum(2,3);\n\n//   return <div>\n//   <div>myComponent!</div>\n//   <div>num:{num}</div>\n//   <div>str:{str}</div>\n//   <div>bool:{bool} Attenzione! I booleani non vengono visualizzati</div>\n//   {val}\n//   {/*Rendering condizionale con operatore ternario*/}\n//   {bool === true ? <div>bool è true</div> : <div>bool è false</div>} \n//   {/*Rendering con and logico -> Stampare qualcosa solo se la condizione è true, altrimenti nulla*/}\n//   {bool===true && <div>bool è true</div>}\n//   <div>Risultato somma: {varSomma}</div>\n//   <div>Risultato somma: {sum(4,3)}</div>\n//   {/*<div>Risultato somma: {Sum(4,3)}</div>*/}\n//   </div>;\n// }\n\n// export function CyclicRenderingComponent() {\n//   let array:number[]=[2,4,6,7];\n//   let arrayJSX=array.map(item => {return <div>Num:{item}</div>});\n\n//   let arrayDiJSX=[];\n//   for(let i=0; i<array.length;i++)\n//   {\n//     arrayDiJSX.push(<div key={i}>arrayDiJSX posizione {i} : {array[i]}</div>);\n//   }\n\n//   return <>\n//   <h4>Rendering ciclico</h4>\n//   {arrayJSX}\n//   {array.map((item,index) => {return <div key={index}>Num {index} : {item}</div>})}\n//   {arrayDiJSX}\n//   </>\n// }\n\nexport default function App() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [surname, setSurname] = useState(\"\");\n  const [value, setValue] = useState(10);\n\n  //Se nello useEffect si definisce come lista di dipendenze l'array vuoto [], allora viene invocato l'effetto al mount del componente\n  useEffect(() => {\n    console.log(\"useEffect evento di mount!\");\n    return () => {\n      console.log(\"useEffect evento di unmount!\");\n    };\n  }, []); //React invoca l'effetto solo nel momento di montaggio del componente\n\n  //Non c'è limire al numero di useEffect che si possono definire\n  useEffect(() => {\n    console.log(\"useEffect evento di mount2!\");\n  }, []);\n  console.log(\"App()\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {}, value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setValue(20);\n      },\n      children: \"imposta a 20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Value: \", value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(PersonInput, {\n      onSave: persona => {\n        console.log(\"Input della callback\", persona);\n        setName(persona.name);\n        setSurname(persona.surname);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Nome: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Cognome: \", surname]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"newComponent\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"6V+hLKHomVNl5Qz8N5DYyE5Sb/U=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Counter","PersonInput","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","text","setText","name","setName","surname","setSurname","value","setValue","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSave","persona","_c","$RefreshReg$"],"sources":["C:/Users/Andrea Polini/Documents/React_2024/fitstic-react-2024-main/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styles from './App.module.scss';\nimport logo from \"./assets/logo512.png\";\nimport Display from './components/Display';\nimport Counter from './components/Counter';\nimport TextComponent from './components/TextComponent';\nimport CounterWithObjectState from './components/CounterWithObjectState';\nimport { MyCustomInput } from './components/MyCustomInput';\nimport { PersonInput } from './components/PersonInput';\nimport { MiddleComponent } from './components/MiddleComponent';\nimport NewComponent from './components/NewComponent';\n\n// export default function App() {\n//   return <>\n//     <div className={styles.title}>\n//       <img src={logo} alt=\"logo\" />\n//       <div>Fitstic React 2024</div>\n//     </div>\n//     { /*<MyComponent /> */}\n//     <CyclicRenderingComponent />\n//   </>;\n// }\n\n// //ha la stessa funzione della function Sum con la differenza che la function ha valenza solo all'interno di MyComponent, mentre questa variabile const sum ha valenza in tutto il file\n// const sum=(n1:number, n2:number) => {return n1+n2};\n\n// export function MyComponent() {\n//   // function Sum(n1:number, n2:number){\n//   //   return n1+n2;\n//   // }\n\n\n//   let num:number=5;\n//   let str:string=\"ciao\";\n//   let bool:boolean=true;\n\n//   //Rendering condizionale con variabile di appoggio\n//   let val:JSX.Element;\n//   if(bool===true)\n//   {\n//     val=<div>bool è true</div>\n//   }\n//   else\n//   {\n//     val=<div>bool è false</div>\n//   }\n\n//   //Stampare qualcosa solo se è true, altrimenti non stampare nulla\n//   let val1:JSX.Element | null=null;\n//   if(bool===true)\n//   {\n//     val1=<div>bool è true</div>\n//   }\n\n//   //Lo switch può essere utilizzato ma non dentro al JSX -> JSX non supporta lo switch quindi devo per forza utilizzarlo mediante varibiabile di appoggio\n//   let varAppoggio;\n//   switch(num) {\n//     case 1:{ \n//       varAppoggio=<div>num è 1</div>;\n//       break;\n//     }\n//     case 2:{ \n//       varAppoggio=<div>num è 2</div>;\n//       break;\n//     }\n//     case 3:{ \n//       varAppoggio=<div>num è 3</div>;\n//       break;\n//     }\n//     default:{\n//       varAppoggio=<div>altro</div>;\n//       break;\n//     }\n//   }\n\n//   let varSomma=sum(2,3);\n//   //let varSomma=Sum(2,3);\n\n//   return <div>\n//   <div>myComponent!</div>\n//   <div>num:{num}</div>\n//   <div>str:{str}</div>\n//   <div>bool:{bool} Attenzione! I booleani non vengono visualizzati</div>\n//   {val}\n//   {/*Rendering condizionale con operatore ternario*/}\n//   {bool === true ? <div>bool è true</div> : <div>bool è false</div>} \n//   {/*Rendering con and logico -> Stampare qualcosa solo se la condizione è true, altrimenti nulla*/}\n//   {bool===true && <div>bool è true</div>}\n//   <div>Risultato somma: {varSomma}</div>\n//   <div>Risultato somma: {sum(4,3)}</div>\n//   {/*<div>Risultato somma: {Sum(4,3)}</div>*/}\n//   </div>;\n// }\n\n// export function CyclicRenderingComponent() {\n//   let array:number[]=[2,4,6,7];\n//   let arrayJSX=array.map(item => {return <div>Num:{item}</div>});\n\n//   let arrayDiJSX=[];\n//   for(let i=0; i<array.length;i++)\n//   {\n//     arrayDiJSX.push(<div key={i}>arrayDiJSX posizione {i} : {array[i]}</div>);\n//   }\n\n//   return <>\n//   <h4>Rendering ciclico</h4>\n//   {arrayJSX}\n//   {array.map((item,index) => {return <div key={index}>Num {index} : {item}</div>})}\n//   {arrayDiJSX}\n//   </>\n// }\n\nexport default function App() {\n  const [text, setText]=useState(\"\");\n  const [name, setName]=useState(\"\");\n  const [surname, setSurname]=useState(\"\");\n  const [value, setValue]=useState(10);\n\n  //Se nello useEffect si definisce come lista di dipendenze l'array vuoto [], allora viene invocato l'effetto al mount del componente\n  useEffect(() => {\n    console.log(\"useEffect evento di mount!\");\n    return () => {\n      console.log(\"useEffect evento di unmount!\");\n    };\n  },[]);//React invoca l'effetto solo nel momento di montaggio del componente\n  \n  //Non c'è limire al numero di useEffect che si possono definire\n  useEffect(() => {\n    console.log(\"useEffect evento di mount2!\");\n  },[]);\n\n  console.log(\"App()\");\n\n  return <>\n    <div>App</div>\n    \n    {/* <Counter /> */}\n\n    {/* Differenza tra cambio di una prop qualsiasi e cambio della prop key:\n        - se cambia la prorp qualsiasi, il componente viene RIDISEGNATO\n        - se cambia la prop key, il componente viene REINIZIALIZZATO (tutti gli stati tornano al valore iniziale)  \n      */}\n    {/* <Counter initialValue={value}/> */}\n    <Counter key={value} />\n    <button onClick={() => {setValue(20)}}>imposta a 20</button>\n    <div>Value: {value}</div>\n\n    {/* <TextComponent /> */}\n    \n    {/* <CounterWithObjectState /> */}\n    \n                                                  {/*Implementazione della callback */}\n    {/* <MyCustomInput required={true} label='Username' onChange={(text => {\n      console.log(text);\n      setText(text);\n    })} />\n    <div>Testo in App.tsx: {text}</div> */}\n    \n    {/* <MyCustomInput required={false} label='Password' /> */}\n    \n    <PersonInput onSave={(persona:{name:string, surname:string}) => {\n    console.log(\"Input della callback\",persona);\n    setName(persona.name);\n    setSurname(persona.surname);}}/>\n    <div>Nome: {name}</div>\n    <div>Cognome: {surname}</div>\n    \n    {/* <MiddleComponent onChange={(text => {\n      console.log(text);\n      setText(text);\n    })} />\n    <div>Testo in App.tsx: {text}</div> */}\n\n    <newComponent />\n\n  </>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}